
// Generated by cppfront v0.8.2 build AA17:1543
#ifndef VEC2_H_CPP2
#define VEC2_H_CPP2

#define CPP2_IMPORT_STD Yes
#define CPP2_NO_EXCEPTIONS Yes

#include "cpp2util.h"

class Vec2;

#include "math/angle.h"

class Vec2 {

public:
  double x{0.0};

public:
  double y{0.0};

public:
  constexpr Vec2(cpp2::impl::in<double> _x, cpp2::impl::in<double> _y);

public:
  constexpr Vec2(cpp2::impl::in<double> _all);

public:
  constexpr auto operator=(cpp2::impl::in<double> _all) -> Vec2 &;

public:
  [[nodiscard]] auto format() const & -> std::string;

public:
  [[nodiscard]] auto reciprocal() const & -> Vec2;

public:
  auto rotate(cpp2::impl::in<Angle> by) & -> void;

public:
  Vec2(Vec2 const &that);

public:
  auto operator=(Vec2 const &that) -> Vec2 &;

public:
  Vec2(Vec2 &&that) noexcept;

public:
  auto operator=(Vec2 &&that) noexcept -> Vec2 &;

public:
  explicit Vec2();

public:
  [[nodiscard]] auto lengthSquared() const & -> auto;

public:
  [[nodiscard]] auto length() const & -> auto;

public:
  auto normalise() & -> void;

public:
  [[nodiscard]] auto normalised() const & -> Vec2;

public:
  [[nodiscard]] static auto dot(Vec2 const &lhs, Vec2 const &rhs) -> auto;

public:
  [[nodiscard]] auto operator+(Vec2 const &other) const & -> Vec2;

public:
  [[nodiscard]] auto operator-(Vec2 const &other) const & -> Vec2;

public:
  [[nodiscard]] auto operator*(Vec2 const &other) const & -> Vec2;

public:
  [[nodiscard]] auto operator/(Vec2 const &other) const & -> Vec2;

public:
  [[nodiscard]] auto operator-() const & -> Vec2;

public:
  auto operator+=(Vec2 const &other) & -> void;

public:
  auto operator-=(Vec2 const &other) & -> void;

public:
  auto operator*=(Vec2 const &other) & -> void;

public:
  auto operator/=(Vec2 const &other) & -> void;

public:
  [[nodiscard]] auto operator+(cpp2::impl::in<double> other) const & -> Vec2;

public:
  [[nodiscard]] auto operator-(cpp2::impl::in<double> other) const & -> Vec2;

public:
  [[nodiscard]] auto operator*(cpp2::impl::in<double> other) const & -> Vec2;

public:
  [[nodiscard]] auto operator/(cpp2::impl::in<double> other) const & -> Vec2;

public:
  auto operator+=(cpp2::impl::in<double> other) & -> void;

public:
  auto operator-=(cpp2::impl::in<double> other) & -> void;

public:
  auto operator*=(cpp2::impl::in<double> other) & -> void;

public:
  auto operator/=(cpp2::impl::in<double> other) & -> void;
};

// {fmt} output shim
std::string format_as(const Vec2 &inst) { return inst.format(); }

constexpr Vec2::Vec2(cpp2::impl::in<double> _x, cpp2::impl::in<double> _y)
    : x{_x}, y{_y}
{
}

constexpr Vec2::Vec2(cpp2::impl::in<double> _all) : x{_all}, y{_all} {}

constexpr auto Vec2::operator=(cpp2::impl::in<double> _all) -> Vec2 &
{
  x = _all;
  y = _all;
  return *this;
}

[[nodiscard]] auto Vec2::format() const & -> std::string
{
  return std::format("[{}, {}]", x, y);
}

[[nodiscard]] auto Vec2::reciprocal() const & -> Vec2
{
  return Vec2(1.0 / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(1.0), x),
              1.0 / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(1.0), y));
}

auto Vec2::rotate(cpp2::impl::in<Angle> by) & -> void
{
  auto cs{std::cos(CPP2_UFCS(radians)(by))};
  auto sn{std::sin(CPP2_UFCS(radians)(by))};

  auto px{x * cs - y * sn};
  auto py{x * cpp2::move(sn) + y * cpp2::move(cs)};

  x = cpp2::move(px);
  y = cpp2::move(py);
}

Vec2::Vec2(Vec2 const &that) : x{that.x}, y{that.y} {}

auto Vec2::operator=(Vec2 const &that) -> Vec2 &
{
  x = that.x;
  y = that.y;
  return *this;
}

Vec2::Vec2(Vec2 &&that) noexcept : x{std::move(that).x}, y{std::move(that).y} {}

auto Vec2::operator=(Vec2 &&that) noexcept -> Vec2 &
{
  x = std::move(that).x;
  y = std::move(that).y;
  return *this;
}

Vec2::Vec2() {}

[[nodiscard]] auto Vec2::lengthSquared() const & -> auto
{
  return (x * x) + (y * y);
}

[[nodiscard]] auto Vec2::length() const & -> auto
{
  return std::sqrt(lengthSquared());
}

auto Vec2::normalise() & -> void
{

  auto len{length()};
  x /= CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(x), len);
  y /= CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(y), cpp2::move(len));
}

[[nodiscard]] auto Vec2::normalised() const & -> Vec2
{

  auto len{length()};
  return Vec2(x / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(x), len),
              y / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(y), len));
}

[[nodiscard]] auto Vec2::dot(Vec2 const &lhs, Vec2 const &rhs) -> auto
{
  return (lhs.x * rhs.x) + (lhs.y * rhs.y);
}

[[nodiscard]] auto Vec2::operator+(Vec2 const &other) const & -> Vec2
{
  return Vec2(x + other.x, y + other.y);
}

[[nodiscard]] auto Vec2::operator-(Vec2 const &other) const & -> Vec2
{
  return Vec2(x - other.x, y - other.y);
}

[[nodiscard]] auto Vec2::operator*(Vec2 const &other) const & -> Vec2
{
  return Vec2(x * other.x, y * other.y);
}

[[nodiscard]] auto Vec2::operator/(Vec2 const &other) const & -> Vec2
{
  return Vec2(x / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(x), other.x),
              y / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(y), other.y));
}

[[nodiscard]] auto Vec2::operator-() const & -> Vec2 { return Vec2(-x, -y); }

auto Vec2::operator+=(Vec2 const &other) & -> void
{
  x += other.x;
  y += other.y;
}

auto Vec2::operator-=(Vec2 const &other) & -> void
{
  x -= other.x;
  y -= other.y;
}

auto Vec2::operator*=(Vec2 const &other) & -> void
{
  x *= other.x;
  y *= other.y;
}

auto Vec2::operator/=(Vec2 const &other) & -> void
{
  x /= CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(x), other.x);
  y /= CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(y), other.y);
}

[[nodiscard]] auto Vec2::operator+(cpp2::impl::in<double> other) const & -> Vec2
{
  return Vec2(x + other, y + other);
}

[[nodiscard]] auto Vec2::operator-(cpp2::impl::in<double> other) const & -> Vec2
{
  return Vec2(x - other, y - other);
}

[[nodiscard]] auto Vec2::operator*(cpp2::impl::in<double> other) const & -> Vec2
{
  return Vec2(x * other, y * other);
}

[[nodiscard]] auto Vec2::operator/(cpp2::impl::in<double> other) const & -> Vec2
{
  return Vec2(x / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(x), other),
              y / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(y), other));
}

auto Vec2::operator+=(cpp2::impl::in<double> other) & -> void
{
  x += other;
  y += other;
}

auto Vec2::operator-=(cpp2::impl::in<double> other) & -> void
{
  x -= other;
  y -= other;
}

auto Vec2::operator*=(cpp2::impl::in<double> other) & -> void
{
  x *= other;
  y *= other;
}

auto Vec2::operator/=(cpp2::impl::in<double> other) & -> void
{
  x /= CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(x), other);
  y /= CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(y), other);
}
#endif
