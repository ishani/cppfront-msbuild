#include "math/rng.h2"

Vec3: @basic_value @euclidean_vector<double> type = {

	public x: double = 0.0;
	public y: double = 0.0;
	public z: double = 0.0;
	
	operator=: (out this, _x: double, _y: double, _z: double) == { x = _x; y = _y; z = _z; }
	operator=: (out this, _all: double) == { x = _all; y = _all; z = _all; }

	format: (this) -> std::string = {
		return std::format("[{}, {}, {}]", x, y, z);
	}

	reciprocal: (this) -> Vec3 = {
		return Vec3( 1.0 / x, 1.0 / y, 1.0 / z );
	}

	cross: (in_ref lhs: Vec3, in_ref rhs: Vec3) -> Vec3 = {
		return Vec3(lhs.y * rhs.z - lhs.z * rhs.y,
					lhs.z * rhs.x - lhs.x * rhs.z,
					lhs.x * rhs.y - lhs.y * rhs.x);
	}
}

RandomNormal: (inout rng:rng32) -> Vec3 = {
	rX: = -1.0 + ( rng.genFloat() * 2.0 );
	rY: = -1.0 + ( rng.genFloat() * 2.0 );
	rZ: = -1.0 + ( rng.genFloat() * 2.0 );

	return Vec3( rX, rY, rZ ).normalised();
}

