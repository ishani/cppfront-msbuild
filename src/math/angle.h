
// Generated by cppfront v0.8.2 build AA17:1543
#ifndef ANGLE_H_CPP2
#define ANGLE_H_CPP2

#define CPP2_IMPORT_STD Yes
#define CPP2_NO_EXCEPTIONS Yes

#include "cpp2util.h"

class Angle;

[[nodiscard]] constexpr auto degreesToRadians(cpp2::impl::in<double> degrees)
    -> decltype(auto);
[[nodiscard]] constexpr auto radiansToDegrees(cpp2::impl::in<double> radians)
    -> decltype(auto);

double inline constexpr pi{3.141592653589793238462643};
double inline constexpr twoPi{6.283185307179586476925286};
double inline constexpr recpPi{1.0 /
                               CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(1.0), pi)};
double inline constexpr recpTwoPi{
    1.0 / CPP2_ASSERT_NOT_ZERO(CPP2_TYPEOF(1.0), twoPi)};

class Angle {
private:
  float m_degrees{};

private:
  float m_radians{};

public:
  [[nodiscard]] auto degrees() const & -> float;

public:
  [[nodiscard]] auto radians() const & -> float;

public:
  [[nodiscard]] static auto fromDegrees(cpp2::impl::in<float> deg) -> Angle;

public:
  [[nodiscard]] static auto fromRadians(cpp2::impl::in<float> rad) -> Angle;

public:
  [[nodiscard]] auto
  operator<=>(Angle const &that) const & -> std::strong_ordering = default;

public:
  Angle(Angle const &that);

public:
  auto operator=(Angle const &that) -> Angle &;

public:
  Angle(Angle &&that) noexcept;

public:
  auto operator=(Angle &&that) noexcept -> Angle &;

public:
  explicit Angle();
};

[[nodiscard]] constexpr auto degreesToRadians(cpp2::impl::in<double> degrees)
    -> decltype(auto)
{
  return degrees * 0.017453292519943295769236907684;
}

[[nodiscard]] constexpr auto radiansToDegrees(cpp2::impl::in<double> radians)
    -> decltype(auto)
{
  return radians * 57.29577951308232087679815481410;
}

[[nodiscard]] auto Angle::degrees() const & -> float { return m_degrees; }

[[nodiscard]] auto Angle::radians() const & -> float { return m_radians; }

[[nodiscard]] auto Angle::fromDegrees(cpp2::impl::in<float> deg) -> Angle
{
  Angle result{};
  result.m_degrees = deg;
  result.m_radians = degreesToRadians(deg);
  return result;
}

[[nodiscard]] auto Angle::fromRadians(cpp2::impl::in<float> rad) -> Angle
{
  Angle result{};
  result.m_degrees = radiansToDegrees(rad);
  result.m_radians = rad;
  return result;
}

Angle::Angle(Angle const &that)
    : m_degrees{that.m_degrees}, m_radians{that.m_radians}
{
}

auto Angle::operator=(Angle const &that) -> Angle &
{
  m_degrees = that.m_degrees;
  m_radians = that.m_radians;
  return *this;
}

Angle::Angle(Angle &&that) noexcept
    : m_degrees{std::move(that).m_degrees}, m_radians{std::move(that).m_radians}
{
}

auto Angle::operator=(Angle &&that) noexcept -> Angle &
{
  m_degrees = std::move(that).m_degrees;
  m_radians = std::move(that).m_radians;
  return *this;
}

Angle::Angle() {}
#endif
