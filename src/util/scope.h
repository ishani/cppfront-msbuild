#include "blog.h"

// Generated by cppfront v0.8.2 build AA17:1543
#ifndef SCOPE_H_CPP2
#define SCOPE_H_CPP2

#define CPP2_IMPORT_STD Yes
#define CPP2_NO_EXCEPTIONS Yes

#include "cpp2util.h"

template <typename TCallback>
  requires(std::is_invocable_v<TCallback>)
class OnScopeExit;

class ScopedTimer;

template <typename TCallback>
  requires(std::is_invocable_v<TCallback>)
class OnScopeExit {
public:
  OnScopeExit(TCallback const &func);

public:
  auto operator=(TCallback const &func) -> OnScopeExit &;

public:
  ~OnScopeExit() noexcept;

private:
  TCallback m_callOnExit{};

public:
  OnScopeExit(OnScopeExit const &) =
      delete; /* No 'that' constructor, suppress copy */
public:
  auto operator=(OnScopeExit const &) -> void = delete;
};

class ScopedTimer {
public:
  using TTimeClock = std::chrono::high_resolution_clock;

public:
  using TTimePoint = std::chrono::time_point<TTimeClock>;

public:
  ScopedTimer(cpp2::impl::in<std::string_view> context);

public:
  auto operator=(cpp2::impl::in<std::string_view> context) -> ScopedTimer &;

public:
  ~ScopedTimer() noexcept;

private:
  std::string m_context{};

private:
  TTimePoint m_instant{TTimeClock::now()};

public:
  ScopedTimer(ScopedTimer const &) =
      delete; /* No 'that' constructor, suppress copy */
public:
  auto operator=(ScopedTimer const &) -> void = delete;
};

template <typename TCallback>
  requires(std::is_invocable_v<TCallback>)
OnScopeExit<TCallback>::OnScopeExit(TCallback const &func) : m_callOnExit{func}
{
}

template <typename TCallback>
  requires(std::is_invocable_v<TCallback>)
auto OnScopeExit<TCallback>::operator=(TCallback const &func) -> OnScopeExit &
{
  m_callOnExit = func;
  return *this;
}

template <typename TCallback>
  requires(std::is_invocable_v<TCallback>)
OnScopeExit<TCallback>::~OnScopeExit() noexcept
{
  cpp2::move(*this).m_callOnExit();
}

ScopedTimer::ScopedTimer(cpp2::impl::in<std::string_view> context)
    : m_context{context}
{
}

auto ScopedTimer::operator=(cpp2::impl::in<std::string_view> context)
    -> ScopedTimer &
{
  m_context = context;
  m_instant = TTimeClock::now();
  return *this;
}

ScopedTimer::~ScopedTimer() noexcept
{
  auto duration{std::chrono::duration_cast<std::chrono::seconds>(
      TTimeClock::now() - m_instant)};
  blog::app("{} took {}", cpp2::move(*this).m_context, cpp2::move(duration));
}
#endif
